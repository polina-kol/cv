import streamlit as st
import torch
import requests
import numpy as np
from PIL import Image
from io import BytesIO

from utils.unet_utils import load_model, preprocess, overlay_mask_on_image

st.title("üõ∞Ô∏è –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (U-Net)")

img_pil = None
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "png", "jpeg"])
if uploaded_file:
    img_pil = Image.open(uploaded_file).convert('RGB')

url = st.text_input("–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
if url and not img_pil:
    try:
        response = requests.get(url)
        img_pil = Image.open(BytesIO(response.content)).convert('RGB')
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

if img_pil:
    st.image(img_pil, caption="–û—Ä–∏–≥–∏–Ω–∞–ª",  use_container_width=True)

    input_tensor = preprocess(img_pil)
    model = load_model()

    with torch.no_grad():
        output = model(input_tensor)
        mask = torch.sigmoid(output).squeeze().cpu().numpy()
        binary_mask = (mask > 0.5).astype(np.uint8)

    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
    st.image(mask, caption="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–∞—è –º–∞—Å–∫–∞",  use_container_width=True, clamp=True)
    st.image(binary_mask * 255, caption="–ë–∏–Ω–∞—Ä–Ω–∞—è –º–∞—Å–∫–∞",  use_container_width=True)

    overlay = overlay_mask_on_image(img_pil, binary_mask, alpha=0.4)
    st.image(overlay, caption="–ú–∞—Å–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏",  use_container_width=True)
else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É.")
