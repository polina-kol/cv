import streamlit as st
import torch
import numpy as np
from PIL import Image
from io import BytesIO
import requests

from utils.unet_utils import load_model, preprocess, overlay_mask_on_image

st.title("üõ∞Ô∏è –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (U-Net)")

tab1, tab2 = st.tabs(["–°–µ—Ä–≤–∏—Å", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"])

with tab1:
    source = st.radio("–ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", ["–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞", "–°—Å—ã–ª–∫–∞ (URL)"])

    img_pil = None

    if source == "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞":
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "png", "jpeg"])
        if uploaded_file:
            img_pil = Image.open(uploaded_file).convert('RGB')

    else:
        url = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        if url:
            try:
                response = requests.get(url)
                img_pil = Image.open(BytesIO(response.content)).convert('RGB')
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    if img_pil:
        original_size = img_pil.size
        input_tensor = preprocess(img_pil)

        st.image(img_pil, caption="–û—Ä–∏–≥–∏–Ω–∞–ª", use_container_width=True)

        model = load_model()
        with torch.no_grad():
            output = model(input_tensor)
            mask = output.squeeze().cpu().numpy()
            binary_mask = (mask > 0.5).astype(np.uint8)

        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
        st.image(mask, caption="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–∞—è –º–∞—Å–∫–∞", use_container_width=True, clamp=True)
        st.image(binary_mask * 255, caption="–ë–∏–Ω–∞—Ä–Ω–∞—è –º–∞—Å–∫–∞", use_container_width=True)

        overlay = overlay_mask_on_image(img_pil, binary_mask, alpha=0.4, color=(255, 0, 0))
        st.image(overlay, caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–π –º–∞—Å–∫–æ–π", use_container_width=True)
    else:
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ URL.")

with tab2:
    st.subheader("U-Net –º–æ–¥–µ–ª—å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    st.markdown("- –û–±—É—á–µ–Ω–∞ –Ω–∞ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–∞—Ö")
    st.markdown("- –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: **—Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å / –Ω–µ-—Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**")
    st.markdown("- –ê–∫—Ç–∏–≤–∞—Ü–∏—è: `Sigmoid`, –º–µ—Ç–∫–∏ ‚Äî –±–∏–Ω–∞—Ä–Ω—ã–µ")

    with st.expander("üìä –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏"):
        st.markdown("- **–¢–æ—á–Ω–æ—Å—Ç—å (Accuracy)**: 0.94")
        st.markdown("- **–ü–æ–ª–Ω–æ—Ç–∞ (Recall)**: 0.91")
        st.markdown("- **IoU (Intersection over Union)**: 0.87")
        st.markdown("- **–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å**: BCEWithLogitsLoss")

        st.image("assets/loss_curve.png", caption="–ö—Ä–∏–≤–∞—è –ø–æ—Ç–µ—Ä—å")
        st.image("assets/iou_curve.png", caption="IoU –ø–æ —ç–ø–æ—Ö–∞–º")
