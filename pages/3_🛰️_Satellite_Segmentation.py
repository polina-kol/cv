import streamlit as st
from PIL import Image
import requests
import torch
from io import BytesIO
from utils.unet_utils import load_model, preprocess, postprocess_mask, overlay_mask_on_image

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
st.set_page_config(page_title="–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–æ–≤", page_icon="üõ∞Ô∏è")
st.title("üõ∞Ô∏è –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–æ–≤ (U-Net)")

tab1, tab2 = st.tabs(["–°–µ—Ä–≤–∏—Å", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"])

with tab1:
    st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    source = st.radio("–ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", ["–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "–£–∫–∞–∑–∞—Ç—å URL"])

    img_pil = None
    if source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "png", "jpeg"])
        if uploaded_file:
            img_pil = Image.open(uploaded_file).convert("RGB")
    else:
        url = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        if url:
            try:
                response = requests.get(url)
                img_pil = Image.open(BytesIO(response.content)).convert("RGB")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    if img_pil:
        st.image(img_pil, caption="–û—Ä–∏–≥–∏–Ω–∞–ª", use_container_width=True)
        input_tensor = preprocess(img_pil)
        model = load_model()

        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞..."):
            with torch.no_grad():
                output = model(input_tensor)
                binary_mask, binary_mask_img = postprocess_mask(output, img_pil.size)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Å–∫–∏
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
            col1, col2 = st.columns(2)
            with col1:
                st.image(binary_mask_img, caption="–ë–∏–Ω–∞—Ä–Ω–∞—è –º–∞—Å–∫–∞", use_column_width=True)
            with col2:
                overlay = overlay_mask_on_image(img_pil, binary_mask, alpha=0.4, color=(0, 255, 0))
                st.image(overlay, caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–π –º–∞—Å–∫–æ–π", use_column_width=True)

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            buf = BytesIO()
            binary_mask_img.save(buf, format="PNG")
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –º–∞—Å–∫—É",
                data=buf.getvalue(),
                file_name="mask.png",
                mime="image/png"
            )
    else:
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ URL.")

with tab2:
    st.header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
    st.markdown("""
    - **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞**: U-Net (–∫–∞—Å—Ç–æ–º–Ω–∞—è)
    - **–¢–∏–ø**: –ë–∏–Ω–∞—Ä–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–µ—Å / –Ω–µ –ª–µ—Å)
    - **–í—Ö–æ–¥–Ω–æ–π —Ä–∞–∑–º–µ—Ä**: 256√ó256
    - **–Ø–∑—ã–∫**: PyTorch
    """)
    st.image("assets/map_stats_unet.png", caption="PR / IoU / F1-–≥—Ä–∞—Ñ–∏–∫–∏")
