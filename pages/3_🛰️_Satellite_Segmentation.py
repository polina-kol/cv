import streamlit as st
from PIL import Image
import requests
from io import BytesIO
import torch
import numpy as np
import sys
import os
from torchvision import transforms

sys.path.append(os.path.abspath("../"))

# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏
from models.unet_forest import UNet


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
target_size = (256, 256)
weights_path = "models/weights_forest.pth"

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_model():
    model = UNet(n_class=1)
    model.load_state_dict(torch.load(weights_path, map_location='cpu'))
    model.eval()
    return model

# –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def preprocess(img_pil):
    transform = transforms.Compose([
        transforms.Resize(target_size),
        transforms.ToTensor(),
    ])
    return transform(img_pil).unsqueeze(0)

# –ù–∞–ª–æ–∂–µ–Ω–∏–µ –º–∞—Å–∫–∏
def overlay_mask_on_image(image_pil, mask_np, alpha=0.5, color=(255, 0, 0)):
    image_np = np.array(image_pil).astype(np.uint8)
    mask_rgb = np.zeros_like(image_np)
    mask_rgb[mask_np == 1] = color  # —Ü–≤–µ—Ç –º–∞—Å–∫–∏

    overlay = (image_np * (1 - alpha) + mask_rgb * alpha).astype(np.uint8)
    return Image.fromarray(overlay)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config(page_title="–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–æ–≤", page_icon="üõ∞Ô∏è")
st.title("üõ∞Ô∏è –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–æ–≤ (U-Net)")

tab1, tab2 = st.tabs(["–°–µ—Ä–≤–∏—Å", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"])

with tab1:
    st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    source = st.radio("–ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", ["–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "–£–∫–∞–∑–∞—Ç—å URL"])

    uploaded_file = None
    url = ""

    if source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "png", "jpeg"])
    else:
        url = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")

    if uploaded_file or url:
        try:
            if uploaded_file:
                img_pil = Image.open(uploaded_file).convert('RGB')
            else:
                response = requests.get(url)
                img_pil = Image.open(BytesIO(response.content)).convert('RGB')

            img_pil = img_pil.resize(target_size)
            input_tensor = preprocess(img_pil)

            st.image(img_pil, caption="–û—Ä–∏–≥–∏–Ω–∞–ª", use_column_width=True)

            model = load_model()
            with torch.no_grad():
                output = model(input_tensor)
                mask = torch.sigmoid(output).squeeze().cpu().numpy()
                binary_mask = (mask > 0.5).astype(np.uint8)

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
            col1, col2 = st.columns(2)
            with col1:
                st.image(mask, caption="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–∞—è –º–∞—Å–∫–∞", use_column_width=True, clamp=True)
            with col2:
                st.image(binary_mask * 255, caption="–ë–∏–Ω–∞—Ä–Ω–∞—è –º–∞—Å–∫–∞", use_column_width=True)

            # –ù–∞–ª–æ–∂–µ–Ω–∏–µ –º–∞—Å–∫–∏
            overlay = overlay_mask_on_image(img_pil, binary_mask, alpha=0.4, color=(0, 255, 0))
            st.image(overlay, caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–π –º–∞—Å–∫–æ–π", use_column_width=True)

            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            buf = BytesIO()
            overlay.save(buf, format="PNG")
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –º–∞—Å–∫—É",
                data=buf.getvalue(),
                file_name="segmentation_mask.png",
                mime="image/png"
            )

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")

    else:
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É.")

with tab2:
    st.header("U-Net –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
    st.markdown("""
    - **–ú–æ–¥–µ–ª—å**: UNet
    - **–¢–∏–ø –∑–∞–¥–∞—á–∏**: –ë–∏–Ω–∞—Ä–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–µ—Å / –Ω–µ –ª–µ—Å)
    - **–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**: RGB (256x256)
    """)
    st.image("assets/map_stats_unet.png", caption="PR / IoU / F1-–≥—Ä–∞—Ñ–∏–∫–∏")