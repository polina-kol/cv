import streamlit as st
from PIL import Image
import requests
import torch
from io import BytesIO
from utils.unet_utils import load_model, preprocess, postprocess_mask, overlay_mask_on_image

# –ö–æ–Ω—Ñ–∏–≥
st.set_page_config(page_title="–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–æ–≤", page_icon="üõ∞Ô∏è")
st.title("üõ∞Ô∏è –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–æ–≤ (U-Net)")

tab1, tab2 = st.tabs(["–°–µ—Ä–≤–∏—Å", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"])

with tab1:
    st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    source = st.radio("–ò—Å—Ç–æ—á–Ω–∏–∫:", ["–§–∞–π–ª", "URL"])

    img_pil = None
    if source == "–§–∞–π–ª":
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"])
        if uploaded_file:
            img_pil = Image.open(uploaded_file).convert("RGB")
    else:
        url = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        if url:
            try:
                response = requests.get(url)
                img_pil = Image.open(BytesIO(response.content)).convert("RGB")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    if img_pil:
        st.image(img_pil, caption="–û—Ä–∏–≥–∏–Ω–∞–ª", use_container_width=True)
        input_tensor = preprocess(img_pil)
        st.write("–¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())
        st.write("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:", os.listdir())
        st.write("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ models/:", os.listdir("models") if os.path.exists("models") else "‚ùå models/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        model = load_model()

        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞..."):
            with torch.no_grad():
                output = model(input_tensor)
                binary_mask, binary_mask_img = postprocess_mask(output, img_pil.size)

        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        col1, col2 = st.columns(2)
        with col1:
            st.image(binary_mask_img, caption="–ë–∏–Ω–∞—Ä–Ω–∞—è –º–∞—Å–∫–∞", use_column_width=True)
        with col2:
            overlay = overlay_mask_on_image(img_pil, binary_mask, alpha=0.4)
            st.image(overlay, caption="–ú–∞—Å–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏", use_column_width=True)

        buf = BytesIO()
        binary_mask_img.save(buf, format="PNG")
        st.download_button("üì• –°–∫–∞—á–∞—Ç—å –º–∞—Å–∫—É", data=buf.getvalue(), file_name="mask.png", mime="image/png")

    else:
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ URL.")

with tab2:
    st.markdown("""
    ### –ú–æ–¥–µ–ª—å
    - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: U-Net
    - –¢–∏–ø —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: –±–∏–Ω–∞—Ä–Ω–∞—è
    - –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞: 256√ó256
    - –§—Ä–µ–π–º–≤–æ—Ä–∫: PyTorch

    ![PR –≥—Ä–∞—Ñ–∏–∫–∏](assets/map_stats_unet.png)
    """)
